@using BeeTest.Factories;
@using BeeTest.Pages.Components
@using BeeTest.Models
@using BeeTest.Models.QuestionDetail
@using BeeTest.Services.Interfaces
@using System.Text.Json
@using MudBlazor

@inject IJSRuntime js
@inject ITestService testService
@inject IQuestionTypeService questionTypeService
@inject IQuestionService questionService
@inject NavigationManager navigationManager

@if (IsLoading)
{
    <LoadingView />
} else
{
    <form class="question-form">
        <div id="question-title">
            <label for="title">Question Title</label>
            <textarea id="title" @bind="@Question.Title" />
        </div>
        <div id="choices-container">
            <div id="top">
                <h6>Choices</h6>
            </div>
            <div id="bottom">
                @foreach (var keyValuePair in QuestionDetail.CheckboxQuestionData)
                {
                    <div class="line">
                        <input type="checkbox" @bind="@keyValuePair.Value.IsTrue" />
                        <textarea @bind="@keyValuePair.Value.Statement" />
                        <MudIconButton Variant="Variant.Filled" Style="@($"background-color:{Colors.Red.Default}; color:{Colors.Grey.Lighten5};")" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveDetailData(@keyValuePair.Key))"></MudIconButton>
                    </div>
                }
            </div>
        </div>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" OnClick="AddNewDetailData" Style="@($"background-color:{Colors.Orange.Default}; color:{Colors.Grey.Lighten5}; border-radius: 2px;")">Add Choice</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="Save" Style="@($"background-color:{Colors.Blue.Default}; color:{Colors.Grey.Lighten5}; border-radius: 2px;")">Save Question</MudButton>
    </form>
}

@code {
    [Parameter]
    public int QuestionId { get; set; }

    private Question Question = new Question();
    private CheckboxesQuestionDetail QuestionDetail = new CheckboxesQuestionDetail();

    private bool IsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        Question = await questionService.Get(QuestionId);
        QuestionDetail = (CheckboxesQuestionDetail) QuestionDetailFactory.ParseJSON(Question.QuestionType.Name, Question.Details);

        await base.OnInitializedAsync();
    }

    private void AddNewDetailData()
    {
        int newKey = QuestionDetail.CheckboxQuestionData.Count() + 1;
        while (true)
        {
            if (QuestionDetail.CheckboxQuestionData.ContainsKey(newKey))
            {
                newKey++;
                continue;
            }

            QuestionDetail.CheckboxQuestionData.Add(
                newKey,
                new CheckboxesQuestionDetail.Data()
            );

            break;
        }
    }

    private async Task RemoveDetailData(int key)
    {
        if (QuestionDetail.CheckboxQuestionData.Count() <= 2)
        {
            await js.InvokeVoidAsync("alert", "You must have at least 2 choices, if your question is a boolean, try making a boolean question instead");
            return;
        }

        QuestionDetail.CheckboxQuestionData.Remove(key);
    }

    private async Task Save()
    {
        if (!(await AreFormValuesValid())) return;

        IsLoading = true;
        await Task.Delay(1);

        Question.Details = QuestionDetail.ToJSONString();

        if (await questionService.AddOrUpdate(Question))
        {
            await js.InvokeVoidAsync("alert", "Question Saved Successfully");
        }
        else await js.InvokeVoidAsync("alert", "Couldn't Save Question");

        IsLoading = false;
        await Task.Delay(1);
    }

    private async Task<bool> AreFormValuesValid()
    {
        if (Question.Title == null || Question.Title == "")
        {
            await js.InvokeVoidAsync("alert", "Question title must be filled");
            return false;
        }

        bool hasOneTrue = false;
        foreach (var keyValuePair in QuestionDetail.CheckboxQuestionData)
        {
            if (keyValuePair.Value.Statement == null || keyValuePair.Value.Statement == "")
            {
                await js.InvokeVoidAsync("alert", "Every choice should have a statement");
                return false;
            }

            if (keyValuePair.Value.IsTrue) hasOneTrue = true;
        }

        if (!hasOneTrue)
        {
            await js.InvokeVoidAsync("alert", "The question must have at least 1 true statement");
            return false;
        }

        return true;
    }
}