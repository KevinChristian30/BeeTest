@page "/users"
@layout AuthenticatedLayout

@using BeeTest.Pages.Components
@using BeeTest.Authentication
@using BeeTest.Models
@using Services.Interfaces

@inject NavigationManager navigationManager
@inject IJSRuntime js
@inject IUserService userService

<PageTitle>BeeTest | Manage Users</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="manage-users">
            <PageHeader Text="Manage Users" />
            @if(IsLoading)
            {
                <LoadingView />
            } else if (@users.Count() == 0)
            {
                <h3>There Are No Users</h3>
            } else
            {
                <Button Text="Add User" OnClick="NavigateToAddUserPage" />
                <table class="table table-fluid">
                <thead>
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Email</th>
                        <th scope="col">Gender</th>
                        <th scope="col">Date of Birth</th>
                        <th scope="col">Action</th>
                    </tr>
                </thead>
                <tbody>
                @foreach(var user in users)
                {
                    <tr>
                        <td>@user.Name</td>
                        <td>@user.Email</td>
                        <td>@user.Gender</td>
                        <td>@user.DateOfBirth.ToString("yyyy-MM-dd")</td>
                        <td>
                            <Button Text="Delete" OnClick="@(() => DeleteUser(@user))" />
                        </td>
                    </tr>
                }
                </tbody>
            </table>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private bool IsLoading = false;
    private List<User> users = new List<User>();
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        AuthStateProvider.AllowAdminOnly(authState, navigationManager);

        users = await userService.GetAllParticipants();

        await base.OnInitializedAsync();
    }

    private void NavigateToAddUserPage()
    {
        navigationManager.NavigateTo("/users/add", true);
    }

    private async Task DeleteUser(User user)
    {
        IsLoading = true;

        TimeZoneInfo wibTimeZone = 
            TimeZoneInfo.FindSystemTimeZoneById("SE Asia Standard Time");
        user.DeletedAt = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, wibTimeZone);

        bool isSucessful = await userService.AddOrUpdate(user);
        IsLoading = false;

        if (isSucessful) users.Remove(user);
        else await js.InvokeVoidAsync("alert", "User Deletion Failed");
    }
}