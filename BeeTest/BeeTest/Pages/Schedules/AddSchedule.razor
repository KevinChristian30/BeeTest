@page "/schedules/add"
@layout AuthenticatedLayout

@using BeeTest.Models;
@using BeeTest.Pages.Components
@using BeeTest.Pages.Components.Gates
@using BeeTest.Services.Interfaces;
@using MudBlazor

@inject IJSRuntime js
@inject ITestService testService
@inject IScheduleService scheduleService

<AdminOnlyGate/>

<PageTitle>BeeTest | Add Schedule</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="add-schedules">
            <PageHeader Text="Add Schedule" />

            @if (IsLoading)
            {
                <LoadingView />
            }
            else
            {
                <form class="schedule-form">
                    <div class="line">
                        <input class="form-control" list="datalistOptions" placeholder="Type to search..." @bind="testName">
                        <datalist id="datalistOptions">
                            @foreach(Test test in tests)
                            {
                                <option value="@test.Name" />
                            }
                        </datalist>
                    </div>
                    <div class="line">
                        <div>
                            <label for="start-datetime">Start DateTime</label>
                            <input type="datetime-local" id="start-datetime" @bind="Schedule.StartTime" />
                        </div>
                        <div>
                            <label for="end-datetime">End DateTime</label>
                            <input type="datetime-local" id="end-datetime" @bind="Schedule.EndTime" />
                        </div>
                    </div>

                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="Save" Style="@($"background-color:{Colors.Blue.Default}; color:{Colors.Grey.Lighten5};border-radius:2px;")">Save Schedule</MudButton>
                </form>
            }
        </div>
    </Authorized>
</AuthorizeView> 

@code {
    private bool IsLoading = false;

    private Schedule Schedule = new Schedule();
    private List<Test> tests = new List<Test>();
    private string testName = "";

    protected override async Task OnInitializedAsync()
    {
        tests = await testService.GetAllTests();

        Schedule.StartTime = DateTime.Now;
        Schedule.EndTime = DateTime.Now;

        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        IsLoading = true;
        await Task.Delay(1);

        if (!(await AreFormValuesValid()))
        {
            IsLoading = false;
            await Task.Delay(1);

            return;
        }

        Schedule.Id = 0;
        Schedule.Test = await testService.Get(testName);

        if (await scheduleService.AddOrUpdate(Schedule))
        {
            await js.InvokeVoidAsync("alert", "Schedule Added Successfully");

            Schedule = new Schedule();
            testName = "";
        }
        else await js.InvokeVoidAsync("alert", "Couldn't Save Schedule");

        IsLoading = false;
        await Task.Delay(1);
    }

    private async Task<bool> AreFormValuesValid()
    {
        if (testName == null || testName == "")
        {
            await js.InvokeVoidAsync("alert", "Test Name Must be Filled");
            return false;
        }

        Test test = await testService.Get(testName);
        if (test == null)
        {
            await js.InvokeVoidAsync("alert", "Test Doesn't Exist");
            return false;
        }

        // Need to be server time later
        if (Schedule.StartTime < DateTime.Now)
        {
            await js.InvokeVoidAsync("alert", "Test Start Time must be in the Future");
            return false;
        }

        // Need to be server time later
        if (Schedule.EndTime < Schedule.StartTime)
        {
            await js.InvokeVoidAsync("alert", "Test EndTime must be after Start Time");
            return false;
        }

        return true;    
    }
}
