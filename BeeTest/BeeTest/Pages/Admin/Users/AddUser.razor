@page "/users/add"
@layout AuthenticatedLayout

@using BeeTest.Models
@using BeeTest.Pages.Components
@using BeeTest.Authentication
@using BeeTest.Pages.Components.Gates
@using Services.Interfaces
@using BCrypt.Net
@using MudBlazor

@inject ISnackbar Snackbar
@inject IJSRuntime js
@inject IUserService userService
@inject IRoleService roleService
@inject NavigationManager navigationManager

<AdminOnlyGate/>

<PageTitle>BeeTest | Add User</PageTitle>

<AuthorizeView>
    <Authorized>            
        <div class="add-user">
            <PageHeader Text="Add User" />

            @if (@IsLoading)
            {
                <LoadingView />
            } else
            {
                <form Model="NewUser" class="user-form">
                    <MudTextField @bind-Value="NewUser.Name" Label="Name" Variant="Variant.Filled" InputType="InputType.Text"></MudTextField>
                    <MudTextField @bind-Value="NewUser.Email" Label="Email" Variant="Variant.Filled" InputType="InputType.Email"></MudTextField>

                    <MudRadioGroup @bind-SelectedOption="Gender">
                        <MudRadio Option="1" Value="1" Size="Size.Medium">Male</MudRadio>
                        <MudRadio Option="2" Value="2" Size="Size.Medium">Female</MudRadio>
                    </MudRadioGroup>

                    <div class="line">
                        <label for="date-of-birth">Date of Birth</label>
                        <input type="date" id="date-of-birth" @bind="NewUser.DateOfBirth" />
                    </div>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="Save" Style="@($"background-color:{Colors.Blue.Default}; color:{Colors.Grey.Lighten5}; border-radius: 2px;")">Save User</MudButton>
                </form>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private bool IsLoading { get; set; } = false;

    private User NewUser = new User();
    private int Gender { get; set; } = 1;

    private async Task Save()
    {
        IsLoading = true;
        await Task.Delay(1);

        if (!(await AreFormValuesValid()))
        {
            IsLoading = false;
            await Task.Delay(1);

            return;
        }

        NewUser.Id = 0;
        NewUser.Password = BCrypt.HashPassword(NewUser.Name);
        NewUser.Role = roleService.Get("Participant");
        NewUser.Gender = Gender == 1 ?
            Enumerations.Gender.Male : Enumerations.Gender.Female;

        if (await userService.AddOrUpdate(NewUser))
        {
            await js.InvokeVoidAsync("alert", "User Added Successfully");

            NewUser = new User();
            Gender = 1;
        }
        else await js.InvokeVoidAsync("alert", "Couldn't Save User");

        IsLoading = false;
        await Task.Delay(1);
    }

    private async Task<bool> AreFormValuesValid()
    {
        if (NewUser.Name == null || NewUser.Name == "") {
            await js.InvokeVoidAsync("alert", "Name can't be empty");
            return false;
        }

        if (NewUser.Email == null || NewUser.Email == "")
        {
            await js.InvokeVoidAsync("alert", "Email can't be empty");
            return false;
        }

        if (!NewUser.Email.EndsWith("@gmail.com"))
        {
            await js.InvokeVoidAsync("alert", "Email must end with @gmail.com");
            return false;
        }

        User userWithTheSameEmail = await userService.Get(NewUser.Email);
        if (userWithTheSameEmail != null)
        {
            await js.InvokeVoidAsync("alert", "Email already taken");
            return false;
        }

        return true;
    }
}