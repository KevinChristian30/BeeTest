@page "/tests/add"
@layout AuthenticatedLayout

@using BeeTest.Authentication
@using BeeTest.Models
@using BeeTest.Pages.Components
@using BeeTest.Pages.Components.Gates
@using BeeTest.Services.Interfaces
@using MudBlazor

@inject ITestService testService
@inject IJSRuntime js
@inject NavigationManager navigationManager

<AdminOnlyGate/>

<PageTitle>BeeTest | Add Test</PageTitle>

<AuthorizeView>
    <Authorized>            
        <PageHeader Text="Add Test" />
        <div class="add-test">
            @if (@IsLoading)
            {
                <LoadingView />
            }
            else
            {
                <form Model="NewTest" class="test-form">
                    <MudTextField @bind-Value="NewTest.Name" Label="Test Name" Variant="Variant.Filled" InputType="InputType.Text"></MudTextField>
                    <MudNumericField @bind-Value="NewTest.PassingScore" Label="Test Passing Grade" Variant="Variant.Filled" Min="1" Max="100" />

                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="Save" Style="@($"background-color:{Colors.Blue.Default}; color:{Colors.Grey.Lighten5}; border-radius: 2px;")">Save Test</MudButton>
                </form>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private bool IsLoading { get; set; } = false;
    private Test NewTest = new Test();

    protected override async Task OnInitializedAsync()
    {
        NewTest.PassingScore = 50;

        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        IsLoading = true;
        await Task.Delay(1);

        if (!(await AreFormValuesValid()))
        {
            IsLoading = false;
            await Task.Delay(1);

            return;
        }

        NewTest.Id = 0;

        if (await testService.AddOrUpdate(NewTest))
        {
            await js.InvokeVoidAsync("alert", "Test Added Successfully");

            NewTest = new Test();
            NewTest.PassingScore = 50;
        }
        else await js.InvokeVoidAsync("alert", "Couldn't Add Test");

        IsLoading = false;
        await Task.Delay(1);
    }

    private async Task<bool> AreFormValuesValid()
    {
        if (NewTest.Name == null || NewTest.Name == "")
        {
            await js.InvokeVoidAsync("alert", "Test Name can't be empty");
            return false;
        }

        Test testThatHasTheSameName = await testService.Get(NewTest.Name);
        if (testThatHasTheSameName != null)
        {
            await js.InvokeVoidAsync("alert", "Test Name is Already Taken");
            return false;
        }

        if (NewTest.PassingScore > 100 || NewTest.PassingScore < 1)
        {
            await js.InvokeVoidAsync("alert", "Test Passing Score Must be Between 1 and 100");
            return false;
        }

        return true;
    }
}
