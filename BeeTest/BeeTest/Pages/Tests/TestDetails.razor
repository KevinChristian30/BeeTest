@page "/tests/{id}"
@layout AuthenticatedLayout

@using BeeTest.Authentication
@using BeeTest.Pages.Components
@using BeeTest.Models
@using BeeTest.Services.Interfaces

@inject NavigationManager navigationManager
@inject ITestService testService
@inject IJSRuntime js

<PageTitle>BeeTest | Manage Test</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (IsLoading)
        {
            <LoadingView />
        }
        else if (@test == null)
        {
            <h2>The Test You're Looking for isn't Available</h2>
        }
        else
        {
            <PageHeader Text="@oldTestData.Name" />

            <div class="test-detail">
                <form Model="test" class="test-form">
                    <div class="line">
                        <label for="name">Test Name</label>
                        <input type="text" id="name" @bind="test.Name" />
                    </div>
                    <div class="line">
                        <label for="passing-score">Test Passing Grade</label>
                        <input type="number" id="passing-score" @bind="test.PassingScore" />
                    </div>
                    <Button Text="Update Test" OnClick="Save" />
                </form>
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    private bool IsLoading = false;
    private Test test = new Test();
    private Test oldTestData = new Test();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        AuthStateProvider.AllowAdminOnly(authState, navigationManager);

        IsLoading = true;
        test = await testService.Get(int.Parse(id));

        oldTestData.Name = test.Name;
        oldTestData.PassingScore = test.PassingScore;

        IsLoading = false;

        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        if (test.Name == oldTestData.Name && test.PassingScore == oldTestData.PassingScore)
        {
            await js.InvokeVoidAsync("alert", "You didn't Change Anything");
            return;
        }

        IsLoading = true;
        await Task.Delay(1);

        if (!(await AreFormValuesValid()))
        {
            IsLoading = false;
            await Task.Delay(1);

            return;
        }

        if (await testService.AddOrUpdate(test))
        {
            oldTestData.Name = test.Name;

            await js.InvokeVoidAsync("alert", "Test Updated Successfully");
        } else await js.InvokeVoidAsync("alert", "Couldn't Update Test");

        IsLoading = false;
        await Task.Delay(1);
    }

    private async Task<bool> AreFormValuesValid()
    {
        if (test.Name == null || test.Name == "")
        {
            await js.InvokeVoidAsync("alert", "Test Name can't be empty");
            return false;
        }

        Test testThatHasTheSameName = await testService.Get(test.Name);
        if (test.Name != oldTestData.Name && testThatHasTheSameName != null)
        {
            await js.InvokeVoidAsync("alert", "Test Name is Already Taken");
            return false;
        }

        if (test.PassingScore > 100 || test.PassingScore < 1)
        {
            await js.InvokeVoidAsync("alert", "Test Passing Score Must be Between 1 and 100");
            return false;
        }

        return true;
    }
}
