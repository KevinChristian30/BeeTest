@page "/tests/{id}/questions/add"
@layout AuthenticatedLayout

@using BeeTest.Authentication
@using BeeTest.Pages.Components
@using BeeTest.Models
@using BeeTest.Pages.Components.Gates
@using BeeTest.Services.Interfaces
@using BeeTest.Pages.Components.QuestionForms
@using MudBlazor

@inject NavigationManager navigationManager
@inject ITestService testService
@inject IQuestionTypeService questionTypeService
@inject IJSRuntime js

<AdminOnlyGate/>

<PageTitle>BeeTest | Manage Test</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (IsLoading)
        {
            <LoadingView />
        } else if (test == null)
        {
            <h2>The Test You're Looking for isn't Available</h2>
        } else
        {
            <PageHeader Text="@("Add Question - " + @test.Name)" />

            <form class="question-form">
                <div class="line">
                    <select id="question-type" @bind="@questionType">
                        @foreach (var questionType in @questionTypes)
                        {
                            <option value="@questionType.Name">@questionType.Name</option>
                        }
                    </select>
                </div>
            </form>
            <br />

            <QuestionFormFactory QuestionType="@questionType" TestId="@(int.Parse(@id))" />
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string id { get; set; }

    private bool IsLoading = false;
    private Test test = new Test();
    private List<QuestionType> questionTypes = new List<QuestionType>();
    private string questionType = "";

    protected override async Task OnInitializedAsync()
    {
        test = await testService.Get(int.Parse(id));
        questionTypes = await questionTypeService.GetAllQuestionTypes();
        if (questionTypes != null && questionTypes.Count() > 0) 
            questionType = questionTypes[0].Name;

        await base.OnInitializedAsync();
    }
}
