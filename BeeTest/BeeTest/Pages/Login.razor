@page "/login"

@using BeeTest.Authentication
@using BeeTest.Services.Interfaces
@using BCrypt.Net
@using MudBlazor
@using BeeTest.Pages.Components

@inject AuthenticationStateProvider authenticationStateProvider
@inject IJSRuntime js
@inject NavigationManager navigationManager
@inject IUserService userService

<PageTitle>BeeTest | Login</PageTitle>

<div class="login">
    <form>
        @if (IsLoading)
        {
            <LoadingView />
        } else
        {
            <h1>BeeTest</h1>
            <div class="field-container">
                <MudTextField @bind-Value="model.Email" Label="Email" Variant="Variant.Filled" InputType="InputType.Email"></MudTextField>
                <MudTextField @bind-Value="model.Password" Label="Password" Variant="Variant.Filled" InputType="InputType.Password"></MudTextField>
            </div>
            <Button Text="Login" OnClick="Authenticate" />
        }
    </form>
</div>


@code {
    private class Model
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();
    private bool IsLoading = false;

    private async Task Authenticate()
    {
        IsLoading = true;
        await Task.Delay(1);

        var userAccount = await userService.Get(model.Email);

        if (userAccount == null)
        {
            IsLoading = false;
            await Task.Delay(1);
            await js.InvokeVoidAsync("alert", "Email Not Found");
            return;
        }

        if (!BCrypt.Verify(model.Password, userAccount.Password))
        {
            IsLoading = false;
            await Task.Delay(1);
            await js.InvokeVoidAsync("alert", "Wrong Password");
            return;
        }

        var authStateProvider = (AuthStateProvider) authenticationStateProvider;
        await authStateProvider.UpdateAuthenticationState(new UserSession
        {
            Email = userAccount.Email,
            Role = userAccount.Role.Name
        });

        IsLoading = false;
        await Task.Delay(1);

        navigationManager.NavigateTo("/", true);
    }
}