@using BeeTest.Pages.Components
@using BeeTest.Models
@using BeeTest.Models.QuestionDetail
@using BeeTest.Services.Interfaces
@using System.Text.Json

@inject IJSRuntime js
@inject ITestService testService
@inject IQuestionTypeService questionTypeService
@inject IQuestionService questionService
@inject NavigationManager navigationManager

@if (IsLoading)
{
    <LoadingView />
}
else
{
    <form class="question-form">
        <div id="question-title">
            <label for="title">Question Title</label>
            <textarea id="title" @bind="@NewQuestion.Title" />
        </div>
        <div id="choices-container">
            <div class="line">
                <input type="radio" name="key" value="a" @onchange="UpdateKey" checked="@IsAChecked" />
                <label for="a">A. </label>
                <textarea id="a" @bind="@choices['a']" />
            </div>
            <div class="line">
                <input type="radio" name="key" value="b" @onchange="UpdateKey" checked="@IsBChecked" />
                <label for="b">B. </label>
                <textarea id="b" @bind="@choices['b']" />
            </div>
            <div class="line">
                <input type="radio" name="key" value="c" @onchange="UpdateKey" checked="@IsCChecked" />
                <label for="c">C. </label>
                <textarea id="c" @bind="@choices['c']" />
            </div>
            <div class="line">
                <input type="radio" name="key" value="d" @onchange="UpdateKey" checked="@IsDChecked" />
                <label for="d">D. </label>
                <textarea id="d" @bind="@choices['d']" />
            </div>
            <div class="line">
                <input type="radio" name="key" value="e" @onchange="UpdateKey" checked="@IsEChecked" />
                <label for="e">E. </label>
                <textarea id="e" @bind="@choices['e']" />
            </div>
        </div>
        <Button Text="Add Question" OnClick="Save" />
    </form>
}

@code {
    [Parameter]
    public int TestId { get; set; }

    private Question NewQuestion = new Question();

    private bool IsLoading = false;

    private Dictionary<char, string> choices = new Dictionary<char, string>();
    private MultipleChoiceQuestionDetail QuestionDetail = new MultipleChoiceQuestionDetail();
    private char key;
    private bool IsAChecked => key == 'a';
    private bool IsBChecked => key == 'b';
    private bool IsCChecked => key == 'c';
    private bool IsDChecked => key == 'd';
    private bool IsEChecked => key == 'e';

    protected override void OnInitialized()
    {
        ResetFormValues();

        base.OnInitialized();
    }

    private void UpdateKey(ChangeEventArgs e) => key = e.Value.ToString()[0];

    private async Task Save()
    {
        IsLoading = true;
        await Task.Delay(1);

        if (!(await AreFormValuesValid()))
        {
            IsLoading = false;
            await Task.Delay(1);

            return;
        }

        NewQuestion.Id = 0;
        QuestionDetail.Choices = choices;
        QuestionDetail.Key = key;
        NewQuestion.Details = QuestionDetail.ToJSONString();
        NewQuestion.Test = await testService.Get(TestId);
        NewQuestion.QuestionType = await questionTypeService.Get("Multiple Choice");

        if (await questionService.AddOrUpdate(NewQuestion))
        {
            await js.InvokeVoidAsync("alert", "Question Added Successfully");

            ResetFormValues();
        }
        else await js.InvokeVoidAsync("alert", "Couldn't Save Question");

        IsLoading = false;
        await Task.Delay(1);
    }

    private async Task<bool> AreFormValuesValid()
    {
        if (NewQuestion.Title == null || NewQuestion.Title == "")
        {
            await js.InvokeVoidAsync("alert", "Question title must be filled");
            return false;
        }

        if (choices['a'] == "" || choices['b'] == "" || choices['c'] == "" || choices['d'] == "" || choices['e'] == "")
        {
            await js.InvokeVoidAsync("alert", "All choices must be filled");
            return false;
        }

        if (key == '\0')
        {
            await js.InvokeVoidAsync("alert", "Question answer key must be chosen");
            return false;
        }

        return true;
    }

    private void ResetFormValues()
    {
        NewQuestion.Title = "";
        choices['a'] = "";
        choices['b'] = "";
        choices['c'] = "";
        choices['d'] = "";
        choices['e'] = "";
        key = '\0';
    }
}
