@using BeeTest.Factories;
@using BeeTest.Models;
@using BeeTest.Models.Answer;
@using BeeTest.Services.Interfaces;
@using MudBlazor

@inject ITemporaryAnswerService temporaryAnswersService
@inject IJSRuntime js

<h6>@temporaryAnswers.Question.Title</h6>

<textarea disabled="@disabled" style="resize:vertical;width:100%;height:200px;" @bind="@Answer.answer" />

@if (!@disabled)
{
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="Save" Style="@($"background-color:{Colors.Blue.Default};color:{Colors.Grey.Lighten5};border-radius:2px;margin-top:10px;")">Save Answer</MudButton>
}

@code {
    [Parameter]
    public TemporaryAnswers temporaryAnswers { get; set; }

    [Parameter]
    public bool disabled { get; set; }

    private EssayAnswer Answer;

    protected override async Task OnInitializedAsync()
    {
        if (temporaryAnswers.Answer == "{}")
        {
            Answer = new EssayAnswer();
        } else
        {
            Answer = (EssayAnswer)AnswerFactory.ParseJSON(temporaryAnswers.Question.QuestionType.Name, temporaryAnswers.Answer);
        }

        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        if (temporaryAnswers.Participant_Schedule.Schedule.EndTime < DateTime.Now)
        {
            await js.InvokeVoidAsync("alert", "Test Already Finished");
            return;
        }

        temporaryAnswers.Answer = Answer.ToJSONString();

        bool isSuccessful = await temporaryAnswersService.Update(temporaryAnswers);
        if (!isSuccessful)
        {
            await js.InvokeVoidAsync("alert", "Couldn't Save Answer");
        }
    }
}
