@page "/tests/{id}"
@layout AuthenticatedLayout

@using BeeTest.Authentication
@using BeeTest.Pages.Components
@using BeeTest.Models
@using BeeTest.Pages.Components.Gates
@using BeeTest.Services.Interfaces
@using MudBlazor

@inject NavigationManager navigationManager
@inject ITestService testService
@inject IQuestionService questionService
@inject IJSRuntime js

<AdminOnlyGate/>

<PageTitle>BeeTest | Manage Test</PageTitle>

<AuthorizeView>
    <Authorized>
        @if (IsLoading)
        {
            <LoadingView />
        }
        else if (@test == null)
        {
            <h2>The Test You're Looking for isn't Available</h2>
        }
        else
        {
            <PageHeader Text="@oldTestData.Name" />

            <div class="test-detail">
                <form Model="test" class="test-form">
                    <MudTextField @bind-Value="test.Name" Label="Test Name" Variant="Variant.Filled" InputType="InputType.Text"></MudTextField>
                    <MudNumericField @bind-Value="test.PassingScore" Label="Test Passing Grade" Variant="Variant.Filled" Min="1" Max="100" />

                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="Save" Style="@($"background-color:{Colors.Blue.Default}; color:{Colors.Grey.Lighten5}; border-radius: 2px; margin-bottom: 25px;")">Save Test</MudButton>
                </form>

                <h3>Questions</h3>
                <div class="button-container">
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Size="Size.Large" OnClick="NavigateToAddQuestionPage" Style="@($"background-color:{Colors.Blue.Default}; color:{Colors.Grey.Lighten5}; border-radius: 2px; margin-bottom: 25px;")">Add Question</MudButton>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" Size="Size.Large" OnClick="SaveQuestionScores" Style="@($"background-color:{Colors.Orange.Default}; color:{Colors.Grey.Lighten5}; border-radius: 2px; margin-bottom: 25px;")">Save Question Points</MudButton>
                </div>
                
                @if (@questions.Count() == 0)
                {
                    <h5>This Test has No Questions</h5>
                }
                else
                {
                    <MudTable Items="@questions" Hover="true" Breakpoint="Breakpoint.Sm" Bordered="true" Dense="true"
                      Style="@($"background-color:{Colors.Grey.Lighten3}; border-radius: 7px; margin-top: 10px")">
                        <HeaderContent>
                            <MudTh>Question Title</MudTh>
                            <MudTh>Question Type</MudTh>
                            <MudTh>Question Points</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate Context="question">
                            <MudTd DataLabel="Question Title">@question.Title</MudTd>
                            <MudTd DataLabel="Question Type">@question.QuestionType.Name</MudTd>
                            <MudTd DataLabel="Question Points">
                                <MudNumericField @bind-Value="@question.QuestionPoints" Label="" Variant="Variant.Outlined" Min="0" Max="100" Style="@($"height: 30px")" />
                            </MudTd>
                            <MudTd DataLabel="Action" Style="width: 150px">
                                <MudIconButton Variant="Variant.Filled" Style="@($"background-color:{Colors.Blue.Default}; color:{Colors.Grey.Lighten5};")" Icon="@Icons.Material.Filled.Edit" OnClick="@(() => NavigateToEditPage(@question.Id))"></MudIconButton>
                                <MudIconButton Variant="Variant.Filled" Style="@($"background-color:{Colors.Red.Default}; color:{Colors.Grey.Lighten5};")" Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteQuestion(@question))"></MudIconButton>
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                }
            </div>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public string id { get; set; }

    private bool IsLoading = false;
    private Test test = new Test();
    private Test oldTestData = new Test();
    private List<Question> questions = new List<Question>();

    protected override async Task OnInitializedAsync()
    {
        test = await testService.Get(int.Parse(id));
        questions = await questionService.GetQuestionsByTestId(int.Parse(id));

        oldTestData.Name = test.Name;
        oldTestData.PassingScore = test.PassingScore;

        await base.OnInitializedAsync();
    }

    private async Task Save()
    {
        if (test.Name == oldTestData.Name && test.PassingScore == oldTestData.PassingScore)
        {
            await js.InvokeVoidAsync("alert", "You didn't Change Anything");
            return;
        }

        IsLoading = true;
        await Task.Delay(1);

        if (!(await AreFormValuesValid()))
        {
            IsLoading = false;
            await Task.Delay(1);

            return;
        }

        if (await testService.AddOrUpdate(test))
        {
            oldTestData.Name = test.Name;

            await js.InvokeVoidAsync("alert", "Test Updated Successfully");
        } else await js.InvokeVoidAsync("alert", "Couldn't Update Test");

        IsLoading = false;
        await Task.Delay(1);
    }

    private async Task<bool> AreFormValuesValid()
    {
        if (test.Name == null || test.Name == "")
        {
            await js.InvokeVoidAsync("alert", "Test Name can't be empty");
            return false;
        }

        Test testThatHasTheSameName = await testService.Get(test.Name);
        if (test.Name != oldTestData.Name && testThatHasTheSameName != null)
        {
            await js.InvokeVoidAsync("alert", "Test Name is Already Taken");
            return false;
        }

        if (test.PassingScore > 100 || test.PassingScore < 1)
        {
            await js.InvokeVoidAsync("alert", "Test Passing Score Must be Between 1 and 100");
            return false;
        }

        return true;
    }

    private void NavigateToAddQuestionPage()
    {
        navigationManager.NavigateTo($"/tests/{id}/questions/add", true);
    }

    private void NavigateToEditPage(int id)
    {
        navigationManager.NavigateTo($"/questions/{id}/edit", true);
    }

    private async Task DeleteQuestion(Question question)
    {
        IsLoading = true;

        bool isSucessful = await questionService.Delete(question.Id);
        IsLoading = false;

        if (isSucessful) questions.Remove(question);
        else await js.InvokeVoidAsync("alert", "Question Deletion Failed");
    }

    private async Task SaveQuestionScores()
    {
        foreach (Question question in questions)
        {
            if (question.QuestionPoints < 1 || question.QuestionPoints > 100)
            {
                await js.InvokeVoidAsync("alert", "Scores must be between 1 and 100");
                return;
            }
        }

        IsLoading = true;
        await Task.Delay(1);

        foreach (Question question in questions)
        {
            if (!(await questionService.AddOrUpdate(question)))
            {
                await js.InvokeVoidAsync("alert", "Something went wrong while saving question points, not all changes may be saved");
                return;
            }
        }

        await js.InvokeVoidAsync("alert", "Question points saved");
        IsLoading = false;
        await Task.Delay(1);
    }
}